# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:37:02+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import (
    ApiIconsetsV3CategoriesPlatformPlatformLanguageLanguageGetResponse,
    ApiIconsetsV3CategoryCategoryCategorySubcategorySubcategoryAmountAmountOffsetOffsetPlatformPlatformLanguageLanguageGetResponse,
    ApiIconsetsV3LatestTermTermAmountAmountOffsetOffsetPlatformPlatformLanguageLanguageGetResponse,
    ApiIconsetsV3SearchTermTermAmountAmountOffsetOffsetPlatformPlatformLanguageLanguageExactAmountExactAmountGetResponse,
    ApiIconsetsV3TotalSinceSinceGetResponse,
    ApiIconsetsV4SearchTermTermAmountAmountOffsetOffsetPlatformPlatformLanguageLanguageExactAmountExactAmountGetResponse,
    ApiTaskWebFontCollectionPostRequest,
    ApiTaskWebFontCollectionPostResponse,
    ApiTaskWebFontIconsPostRequest,
    ApiTaskWebFontIconsPostResponse,
    Language,
    Language4,
    Platform,
    Platform4,
)

app = MCPProxy(
    description="# Icons8 API\n\nIcons8 API allows us to search and obtain [our icons](https://icons8.com/web-app).\n\nYou're welcome to use our icons to extend the functionality of your web and mobile applications, website templates, and even tattoos.\n\n![Tattoos](https://cdn.rawgit.com/icons8/api-docs/cff6fdf0/tattoos.svg)\n\n## Usage Examples\n\nSome examples of what you can do with our icons:\n\n* **Template customization.** This way, [Canva](https://www.canva.com/) uses our icons to customize their layouts.\n\n* **Graphics and text editors.** [Gravit](https://gravit.io/) allows to insert our icons into the mockups.\n\n* **Any application with customization.** [TimeTune](http://timetune.center/) uses our icons to customize the activities.\n\n## Getting Started\n\nTo get started, please [contact us](https://icons8.com/contact) to obtain an API key.\n\n## Pricing\n\nOur API license starts at $100/month.",
    title='Use a [New Version](https://icons8.github.io/icons8-docs/) Instead',
    version='1.0.0',
    servers=[{'url': 'https://api.icons8.com'}],
)


@app.get(
    '/api/iconsets/v3/categories?platform={platform}&language={language}',
    description=""" The operation will not return the categories that have less than 10 icons.
We need it to test the categories without showing garbage on the production website. """,
    tags=['content_querying'],
)
def categories(platform: Platform, language: Language = ...):
    """
    Categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/iconsets/v3/category?category={category}&subcategory={subcategory}&amount={amount}&offset={offset}&platform={platform}&language={language}',
    tags=['content_querying'],
)
def by__category(
    category: str,
    subcategory: str = ...,
    amount: float = 25,
    offset: float = ...,
    platform: Platform = ...,
    language: Language = ...,
):
    """
    By Category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/iconsets/v3/latest?term={term}&amount={amount}&offset={offset}&platform={platform}&language={language}',
    tags=['content_querying'],
)
def latest(
    amount: float = 25,
    offset: float = ...,
    platform: Platform = ...,
    language: Language = ...,
):
    """
    Latest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/iconsets/v3/search?term={term}&amount={amount}&offset={offset}&platform={platform}&language={language}&exact_amount={exact_amount}',
    tags=['content_querying'],
)
def by__keyword_v3(
    term: str,
    amount: float = 25,
    exact_amount: bool = ...,
    offset: float = ...,
    platform: Platform = ...,
    language: Language = ...,
):
    """
    By Keyword v3
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/iconsets/v3/total?since={since}', tags=['content_querying'])
def totals(since: str):
    """
    Totals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/iconsets/v4/search?term={term}&amount={amount}&offset={offset}&platform={platform}&language={language}&exact_amount={exact_amount}',
    tags=['content_querying'],
)
def by__keyword_v4(
    term: str,
    amount: float = 50,
    offset: float = ...,
    platform: Platform4 = 'all',
    language: Language4 = 'en-US',
):
    """
    By Keyword v4
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/task/web-font/collection', tags=['icon_collection_management'])
def from_a__collection(body: ApiTaskWebFontCollectionPostRequest = None):
    """
    From a Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/task/web-font/icons', tags=['icon_collection_management'])
def from__separate__icons(body: ApiTaskWebFontIconsPostRequest = None):
    """
    From Separate Icons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
