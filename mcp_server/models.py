# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:37:02+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel


class AuthArgument(BaseModel):
    hash: str = Field(..., description='Authorization hash')


class CategoryV3Item(BaseModel):
    category_code: Optional[str] = None
    category_name: Optional[str] = None
    subcategory: Optional[List] = None


class CssRulesCase(Enum):
    lowercase = 'lowercase'
    as_is = 'as_is'


class Arguments(BaseModel):
    collection: str = Field(..., description='collection identifier')
    css_prefix: Optional[str] = Field(
        None, description='prefix for CSS rules, used to generate LESS/SCSS'
    )
    css_rules_case: Optional[CssRulesCase] = Field(
        None, description='glyph names conversion rule'
    )
    css_selector: Optional[str] = Field(
        None,
        description='template for glyph selector; placeholder {{glyph}} will be replaced with glyph names',
    )
    font_name: str = Field(..., description='name of iconic webfont')


class CollectionWebFontTaskArguments(BaseModel):
    arguments: Optional[Arguments] = None


class CompactCategoryV3Item(BaseModel):
    api_code: str
    name: str


class Features(BaseModel):
    bitmap: float = Field(
        ...,
        description='"Could user use images in bitmap / raster formats in any size ?"',
    )
    nolink: float = Field(
        ..., description='"Could user use images without any link to Icons8 ?"'
    )
    vector: float = Field(
        ..., description='"Could user use images in vector formats ?"'
    )


class Share(BaseModel):
    png: Optional[List] = Field(
        None, description='some raster images for share the icon'
    )
    url: Optional[str] = Field(None, description='short URL to use in twitter')


class Subcategory(BaseModel):
    api_code: str
    name: str


class Vector(BaseModel):
    eps: Optional[str] = Field(None, description='absolute URL to file in EPS format')
    pdf: Optional[str] = Field(None, description='absolute URL to file in PDF format')
    svg_editable: Optional[str] = Field(
        None, alias='svg-editable', description='absolute URL to original SVG file'
    )
    svg_simplified: Optional[str] = Field(
        None,
        alias='svg-simplified',
        description='absolute URL to compressed and simplified SVG file',
    )


class CompactIconV3Item(BaseModel):
    category: Optional[str] = None
    common_icon_id: float = Field(
        ...,
        description='identifier for group of the same icons in different styles; i.e. id of all "home" icons',
    )
    created: str = Field(..., description='date (ISO8601 format) of icon was published')
    features: Features = Field(
        ...,
        description='internal service attribute; internal information about icon features; private; depend on the rights of the current user',
    )
    id: float = Field(..., description='unique icon identifier')
    name: str = Field(..., description='icon name')
    platform_code: str = Field(..., description='icon style')
    share: Optional[Share] = Field(
        None, description='internal service attribute; some links to spread the world'
    )
    subcategory: Optional[Subcategory] = None
    svg: str = Field(..., description='plain SVG content of icon')
    url: Optional[str] = Field(
        None,
        description='internal service attribute; the meaning of this attribute is "Identifier of thread at Disquss"',
    )
    vector: Optional[Vector] = Field(
        None,
        description="URLs to icon sources in different vector formats; private; depend on the current user and could be opened in user's browser only",
    )


class IconV3Item(CompactIconV3Item):
    category: Optional[str] = None
    common_icon_id: float = Field(
        ...,
        description='identifier for group of the same icons in different styles; i.e. id of all "home" icons',
    )
    created: str = Field(..., description='date (ISO8601 format) of icon was published')
    features: Features = Field(
        ...,
        description='internal service attribute; internal information about icon features; private; depend on the rights of the current user',
    )
    id: float = Field(..., description='unique icon identifier')
    name: str = Field(..., description='icon name')
    platform_code: str = Field(..., description='icon style')
    share: Optional[Share] = Field(
        None, description='internal service attribute; some links to spread the world'
    )
    subcategory: Optional[Subcategory] = None
    svg: str = Field(..., description='plain SVG content of icon')
    url: Optional[str] = Field(
        None,
        description='internal service attribute; the meaning of this attribute is "Identifier of thread at Disquss"',
    )
    vector: Optional[Vector] = Field(
        None,
        description="URLs to icon sources in different vector formats; private; depend on the current user and could be opened in user's browser only",
    )


class Meta(RootModel[Any]):
    root: Any


class Search(RootModel[Any]):
    root: Any


class Code(Enum):
    json_not_valid = 'json_not_valid'
    auth_required = 'auth_required'
    auth_failed = 'auth_failed'
    access_denied = 'access_denied'
    io_fail = 'io_fail'
    database_fail = 'database_fail'
    argument_is_missed = 'argument_is_missed'
    argument_is_wrong = 'argument_is_wrong'
    paid_feature = 'paid_feature'
    not_possible = 'not_possible'


class TaskError(BaseModel):
    code: Code = Field(..., description='error code')
    description: str = Field(..., description='human readable error message')


class Results(BaseModel):
    zip: Optional[str] = Field(None, description='URL to webfont files in ZIP format')


class Status(Enum):
    field_preparing_ = '`preparing+'
    idle = 'idle'
    in_progress = 'in_progress'
    timeout = 'timeout'
    complete = 'complete'
    failed = 'failed'


class Type(Enum):
    create_web_font = 'create_web_font'
    create_svg_set = 'create_svg_set'


class TaskResult(BaseModel):
    description: Optional[str] = Field(None, description='human readable description')
    id: str = Field(..., description='task identifier')
    results: Optional[Results] = None
    status: Status = Field(..., description='task status')
    type: Type = Field(..., description='task type')


class ApiCode(Enum):
    ios7 = 'ios7'
    win8 = 'win8'
    win10 = 'win10'
    android = 'android'
    androidL = 'androidL'
    color = 'color'
    office = 'office'


class TotalV3Item(BaseModel):
    api_code: ApiCode = Field(
        ...,
        description='icons style code; in other places it named `plarform` or `platform_api_code`',
    )
    name: str
    total: float


class WebFonts(RootModel[Any]):
    root: Any


class Parameters(BaseModel):
    language: Optional[str] = None
    platform: Optional[str] = None


class Result(BaseModel):
    categories: Optional[List] = None


class ApiIconsetsV3CategoriesPlatformPlatformLanguageLanguageGetResponse(BaseModel):
    parameters: Optional[Parameters] = Field(
        None, description='copy of the input parameters from the request'
    )
    result: Optional[Result] = Field(None, description='the result of operation')


class Platform(Enum):
    ios7 = 'ios7'
    win8 = 'win8'
    win10 = 'win10'
    android = 'android'
    androidL = 'androidL'
    color = 'color'
    office = 'office'


class Language(Enum):
    en_US = 'en-US'
    fr_FR = 'fr-FR'
    de_DE = 'de-DE'
    it_IT = 'it-IT'
    pt_BR = 'pt-BR'
    pl_PL = 'pl-PL'
    ru_RU = 'ru-RU'
    es_ES = 'es-ES'


class Parameters1(BaseModel):
    amount: Optional[float] = None
    category: Optional[str] = None
    language: Optional[str] = None
    offset: Optional[str] = None
    platform: Optional[str] = None
    subcategory: Optional[str] = None


class Result1(BaseModel):
    category: Optional[List] = None


class ApiIconsetsV3CategoryCategoryCategorySubcategorySubcategoryAmountAmountOffsetOffsetPlatformPlatformLanguageLanguageGetResponse(
    BaseModel
):
    parameters: Optional[Parameters1] = Field(
        None, description='copy of the input parameters from the request'
    )
    result: Optional[Result1] = Field(None, description='the result of operation')


class Parameters2(BaseModel):
    amount: Optional[float] = None
    language: Optional[str] = None
    offset: Optional[str] = None
    platform: Optional[str] = None
    term: Optional[str] = None


class Result2(BaseModel):
    latest: Optional[List] = None


class ApiIconsetsV3LatestTermTermAmountAmountOffsetOffsetPlatformPlatformLanguageLanguageGetResponse(
    BaseModel
):
    parameters: Optional[Parameters2] = Field(
        None, description='copy of the input parameters from the request'
    )
    result: Optional[Result2] = Field(None, description='the result of operation')


class Result3(BaseModel):
    search: Optional[List] = None


class ApiIconsetsV3SearchTermTermAmountAmountOffsetOffsetPlatformPlatformLanguageLanguageExactAmountExactAmountGetResponse(
    BaseModel
):
    parameters: Optional[Parameters2] = Field(
        None, description='copy of the input parameters from the request'
    )
    result: Optional[Result3] = Field(None, description='the result of operation')


class Parameters4(BaseModel):
    since: Optional[str] = None


class Result4(BaseModel):
    total: Optional[List] = None


class ApiIconsetsV3TotalSinceSinceGetResponse(BaseModel):
    parameters: Optional[Parameters4] = Field(
        None, description='copy of the input parameters from the request'
    )
    result: Optional[Result4] = Field(None, description='the result of operation')


class Parameters5(BaseModel):
    amount__50_: Optional[str] = Field(None, alias='amount `50`')
    language: Optional[str] = None
    offset: Optional[str] = None
    platform: Optional[str] = None
    term: Optional[str] = None


class ApiIconsetsV4SearchTermTermAmountAmountOffsetOffsetPlatformPlatformLanguageLanguageExactAmountExactAmountGetResponse(
    BaseModel
):
    icons: Optional[List] = Field(None, description='the result of operation')
    parameters: Optional[Parameters5] = Field(
        None, description='copy of the input parameters from the request'
    )


class Platform4(Enum):
    all = 'all'
    ios7 = 'ios7'
    ios11 = 'ios11'
    win8 = 'win8'
    win10 = 'win10'
    android = 'android'
    androidL = 'androidL'
    color = 'color'
    office = 'office'
    ultraviolet = 'ultraviolet'
    nolan = 'nolan'
    p1em = 'p1em'
    dotty = 'dotty'
    dusk = 'dusk'
    Dusk_Wired = 'Dusk_Wired'
    cotton = 'cotton'
    doodle = 'doodle'
    flat_round = 'flat_round'


class Language4(Enum):
    en_US = 'en-US'
    fr_FR = 'fr-FR'
    de_DE = 'de-DE'
    it_IT = 'it-IT'
    pt_BR = 'pt-BR'
    pl_PL = 'pl-PL'
    ru_RU = 'ru-RU'
    es_ES = 'es-ES'
    zh_CN = 'zh-CN'
    ja_JP = 'ja-JP'


class Auth(BaseModel):
    hash: str = Field(..., description='Authorization hash')


class Arguments1(BaseModel):
    collection: str = Field(..., description='collection identifier')
    css_prefix: Optional[str] = Field(
        'icons8', description='prefix for CSS rules, used to generate LESS/SCSS'
    )
    css_rules_case: Optional[CssRulesCase] = Field(
        'lowercase', description='glyph names conversion rule'
    )
    css_selector: Optional[str] = Field(
        '.icons8-{{glyph}}',
        description='template for glyph selector; placeholder {{glyph}} will be replaced with glyph names',
    )
    font_name: str = Field(..., description='name of iconic webfont')


class Task(BaseModel):
    arguments: Optional[Arguments1] = None


class ApiTaskWebFontCollectionPostRequest(BaseModel):
    auth: Optional[Auth] = None
    task: Optional[Task] = None


class Results1(BaseModel):
    zip: Optional[str] = None


class Result5(BaseModel):
    description: Optional[str] = Field(None, description='human readable description')
    id: str = Field(..., description='task identifier')
    results: Optional[Results1] = None
    status: str = Field(..., description='task status')
    type: str = Field(..., description='task type')


class ApiTaskWebFontCollectionPostResponse(BaseModel):
    messages: Optional[List] = None
    result: Optional[Result5] = None


class Arguments2(BaseModel):
    collection: str = Field(..., description='collection identifier')
    css_prefix: Optional[str] = Field(
        'icons8', description='prefix for CSS rules, used to generate LESS/SCSS'
    )
    css_rules_case: Optional[CssRulesCase] = Field(
        'lowercase', description='glyph names conversion rule'
    )
    css_selector: Optional[str] = Field(
        '.icons8-{{glyph}}',
        description='template for glyph selector; placeholder {{glyph}} will be replaced with glyph names',
    )
    font_name: str = Field(..., description='name of iconic webfont')


class Task1(BaseModel):
    arguments: Optional[Arguments2] = None


class ApiTaskWebFontIconsPostRequest(BaseModel):
    auth: Optional[Auth] = None
    task: Optional[Task1] = None


class Result6(BaseModel):
    description: Optional[str] = Field(None, description='human readable description')
    id: str = Field(..., description='task identifier')
    results: Optional[Results1] = None
    status: str = Field(..., description='task status')
    type: str = Field(..., description='task type')


class ApiTaskWebFontIconsPostResponse(BaseModel):
    messages: Optional[List] = None
    result: Optional[Result6] = None
